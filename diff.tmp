diff --git a/.dockerignore b/.dockerignore
new file mode 100644
index 0000000..7eb8673
--- /dev/null
+++ b/.dockerignore
@@ -0,0 +1,5 @@
+node_modules
+dist
+.vite
+src/**/*.test.*
+*.log
diff --git a/.gitignore b/.gitignore
index a66221c..7dcc493 100644
--- a/.gitignore
+++ b/.gitignore
@@ -13,6 +13,7 @@ backend/__pycache__/
 backend/*.pyc
 backend/*.pyo
 backend/env/
+backend/.env
 backend/venv/
 backend/.venv/
 backend/test.db
@@ -31,3 +32,4 @@ frontend/.env.*
 
 # Bun
 frontend/bun.lockb
+.env
diff --git a/backend/__init__.py b/backend/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/backend/inference_point.py b/backend/inference_point.py
new file mode 100644
index 0000000..04d4ec7
--- /dev/null
+++ b/backend/inference_point.py
@@ -0,0 +1,93 @@
+import os
+import asyncio
+
+from dotenv import load_dotenv
+from fastapi import APIRouter, WebSocket, WebSocketDisconnect, Depends, HTTPException
+
+from huggingface_hub import get_inference_endpoint, InferenceEndpoint
+
+
+from my_logging import my_logger
+
+logger = my_logger()
+
+
+assert load_dotenv(), "Failed to load environment variables from .env file"
+
+router = APIRouter(
+    prefix="/inference",
+    tags=["inference"],
+    responses={404: {"description": "inference not accessible"}},
+)
+
+endpoint: InferenceEndpoint = get_inference_endpoint(
+    "telehealth-helper-wcc", token=os.getenv("HF_TOKEN")
+)
+
+
+class ConnectionManager:
+    def __init__(self):
+        self.active_connections: list[WebSocket] = []
+
+    async def connect(self, websocket: WebSocket):
+        await websocket.accept()
+        self.active_connections.append(websocket)
+        logger.info(f"WebSocket: Connected. Total: {len(self.active_connections)}")
+
+    def disconnect(self, websocket: WebSocket):
+        if websocket in self.active_connections:
+            self.active_connections.remove(websocket)
+            logger.info(
+                f"WebSocket: Disconnected. Total: {len(self.active_connections)}"
+            )
+
+    async def broadcast(self, data: dict):
+        """Send data to all clients. Remove disconnected clients."""
+        disconnected = []
+        for connection in self.active_connections:
+            try:
+                await connection.send_json(data)
+            except Exception as e:
+                logger.error(f"WebSocket send error: {e}")
+                disconnected.append(connection)
+        for connection in disconnected:
+            self.disconnect(connection)
+
+
+manager_ws = ConnectionManager()
+
+
+@router.websocket("/ws/status")
+async def websocket_status(websocket: WebSocket):
+    await manager_ws.connect(websocket)
+    try:
+        last_status = None
+        while True:
+            endpoint.fetch()
+            current_status = endpoint.status
+            if current_status != last_status:
+                await manager_ws.broadcast({"status": current_status})
+                last_status = current_status
+            await asyncio.sleep(0.2)
+    except WebSocketDisconnect:
+        manager_ws.disconnect(websocket)
+
+
+@router.get("/resume")
+async def resume_endpoint():
+    try:
+        endpoint.resume()  # .wait(timeout=360)
+        return {"status": endpoint.status}
+    except Exception as exp:
+        logger.error(f"Error during resume: {exp}")
+        raise HTTPException(504, "Endpoint resume timed out")
+
+
+@router.get("/pause")
+async def pause_endpoint():
+    try:
+        endpoint.pause()
+        return {"status": endpoint.status}
+    except Exception as exp:
+        logger.error(f"Error during pause: {exp}")
+        raise HTTPException(504, "Endpoint pause timed out")
diff --git a/backend/main.py b/backend/main.py
index efbe154..5c1839a 100644
--- a/backend/main.py
+++ b/backend/main.py
@@ -8,27 +8,14 @@ from fastapi import (
 )
 
 from fastapi.middleware.cors import CORSMiddleware
-from sqlalchemy.orm import Session
-import json
+from inference_point import router as inference_router
 
-from database import SessionLocal, init_db, PDF
-from models import PDFCreate, PDFResponse
 
-# Initialize DB
-init_db()
-
-# FastAPI app
 app = FastAPI()
 
-origins = [
-    "http://localhost:5173",
-    "http://192.168.178.31:5173",
-    "http://localhost:3000",
-    "http://192.168.178.22:5173",
-    # add any other frontend URLs you'll use in dev or prod
-]
+origins = ["http://localhost:5173", "http://192.168.178.22:5173", ""]
+
 
-# CORS (adjust as needed)
 app.add_middleware(
     CORSMiddleware,
     allow_origins=origins,
@@ -37,79 +24,9 @@ app.add_middleware(
     allow_headers=["*"],
 )
 
+app.include_router(inference_router)
 
-def get_db():
-    db = SessionLocal()
-    try:
-        yield db
-    finally:
-        db.close()
-
-
-# --- For WebSocket broadcast ---
-class ConnectionManager:
-    def __init__(self):
-        self.active_connections: list[WebSocket] = []
-
-    async def connect(self, websocket: WebSocket):
-        await websocket.accept()
-        self.active_connections.append(websocket)
-
-    def disconnect(self, websocket: WebSocket):
-        self.active_connections.remove(websocket)
-
-    async def broadcast(self, message: str):
-        for connection in self.active_connections:
-            await connection.send_text(message)
-
-
-manager = ConnectionManager()
-
-
-def broadcast_pdfs_sync(db):
-    import asyncio
-
-    loop = asyncio.new_event_loop()
-    asyncio.set_event_loop(loop)
-    loop.run_until_complete(broadcast_pdfs(db))
-    loop.close()
-
-
-# --- REST endpoint: Create PDF ---
-@app.post("/create", response_model=PDFResponse)
-def create_pdf(
-    pdf: PDFCreate, background_tasks: BackgroundTasks, db: Session = Depends(get_db)
-):
-    db_pdf = PDF(name=pdf.name)
-    db.add(db_pdf)
-    db.commit()
-    db.refresh(db_pdf)
-    # Schedule the broadcast to run after the response is returned
-    background_tasks.add_task(broadcast_pdfs_sync, db)
-    return db_pdf
-
-
-# --- Helper to broadcast PDFs list ---
-async def broadcast_pdfs(db):
-    pdfs = db.query(PDF).all()
-    pdf_list = [
-        {"id": pdf.id, "name": pdf.name, "date": str(pdf.date), "creator": pdf.creator}
-        for pdf in pdfs
-    ]
-    await manager.broadcast(json.dumps({"pdfs": pdf_list}))
-
-
-# --- WebSocket for live updates ---
-@app.websocket("/ws/pdfs")
-async def websocket_endpoint(websocket: WebSocket):
-    await manager.connect(websocket)
-    db = next(get_db())
 
-    try:
-        # On connect, send current PDFs
-        await broadcast_pdfs(db)
-        while True:
-            # Client messages not used, but can be handled here
-            await websocket.receive_text()
-    except WebSocketDisconnect:
-        manager.disconnect(websocket)
+@app.get("/")
+def root():
+    return {"status": "ok"}
diff --git a/backend/my_logging.py b/backend/my_logging.py
new file mode 100644
index 0000000..0d6b2b1
--- /dev/null
+++ b/backend/my_logging.py
@@ -0,0 +1,7 @@
+import logging
+
+
+def my_logger():
+    LOG_FORMAT = "%(levelname)s:     %(message)s"
+    logging.basicConfig(level=logging.INFO, format=LOG_FORMAT)
+    return logging.getLogger(__name__)
diff --git a/backend/nginx.conf b/backend/nginx.conf
new file mode 100644
index 0000000..57f886f
--- /dev/null
+++ b/backend/nginx.conf
@@ -0,0 +1,7 @@
+FROM python:3.11-slim
+WORKDIR /app
+COPY requirements.txt .
+RUN pip install --no-cache-dir -r requirements.txt
+COPY . .
+EXPOSE 8000
+CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]
diff --git a/backend/requirements.txt b/backend/requirements.txt
index b4b1953..e23dc2a 100644
--- a/backend/requirements.txt
+++ b/backend/requirements.txt
@@ -5,3 +5,5 @@ sqlalchemy
 databases
 sqlmodel
 pydantic
+python-dotenv
+huggingface_hub
diff --git a/backend/test/.python-version b/backend/test/.python-version
new file mode 100644
index 0000000..f3fe474
--- /dev/null
+++ b/backend/test/.python-version
@@ -0,0 +1 @@
+3.12.9
diff --git a/backend/test/requirements.txt b/backend/test/requirements.txt
new file mode 100644
index 0000000..14774b4
--- /dev/null
+++ b/backend/test/requirements.txt
@@ -0,0 +1 @@
+websockets
diff --git a/backend/test/simple_ws_status_client.py b/backend/test/simple_ws_status_client.py
new file mode 100644
index 0000000..a4a0ad9
--- /dev/null
+++ b/backend/test/simple_ws_status_client.py
@@ -0,0 +1,26 @@
+import asyncio
+import websockets
+import json
+
+WS_URL = "ws://192.168.178.22:8000/inference/ws/status"
+
+
+async def listen_status():
+    last_status = None
+    async with websockets.connect(WS_URL) as websocket:
+        print(f"Connected to {WS_URL} ...")
+        while True:
+            try:
+                data = await websocket.recv()
+                msg = json.loads(data)
+                status = msg.get("status")
+                if status != last_status:
+                    print(f"Status: {status}")
+                    last_status = status
+            except websockets.ConnectionClosed:
+                print("Connection closed")
+                break
+
+
+if __name__ == "__main__":
+    asyncio.run(listen_status())
diff --git a/frontend/bun.lock b/frontend/bun.lock
index 532c120..b475e8a 100644
--- a/frontend/bun.lock
+++ b/frontend/bun.lock
@@ -6,6 +6,8 @@
       "dependencies": {
         "react": "^19.1.0",
         "react-dom": "^19.1.0",
+        "react-icons": "^5.5.0",
+        "react-use-websocket": "^4.13.0",
       },
       "devDependencies": {
         "@eslint/js": "^9.30.1",
@@ -371,8 +373,12 @@
 
     "react-dom": ["react-dom@19.1.0", "", { "dependencies": { "scheduler": "^0.26.0" }, "peerDependencies": { "react": "^19.1.0" } }, "sha512-Xs1hdnE+DyKgeHJeJznQmYMIBG3TKIHJJT95Q58nHLSrElKlGQqDTR2HQ9fx5CN/Gk6Vh/kupBTDLU11/nDk/g=="],
 
+    "react-icons": ["react-icons@5.5.0", "", { "peerDependencies": { "react": "*" } }, "sha512-MEFcXdkP3dLo8uumGI5xN3lDFNsRtrjbOEKDLD7yv76v4wpnEq2Lt2qeHaQOr34I/wPN3s3+N08WkQ+CW37Xiw=="],
+
     "react-refresh": ["react-refresh@0.17.0", "", {}, "sha512-z6F7K9bV85EfseRCp2bzrpyQ0Gkw1uLoCel9XBVWPg/TjRj94SkJzUTGfOa4bs7iJvBWtQG0Wq7wnI0syw3EBQ=="],
 
+    "react-use-websocket": ["react-use-websocket@4.13.0", "", {}, "sha512-anMuVoV//g2N76Wxqvqjjo1X48r9Np3y1/gMl7arX84tAPXdy5R7sB5lO5hvCzQRYjqXwV8XMAiEBOUbyrZFrw=="],
+
     "resolve-from": ["resolve-from@4.0.0", "", {}, "sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g=="],
 
     "rollup": ["rollup@4.45.1", "", { "dependencies": { "@types/estree": "1.0.8" }, "optionalDependencies": { "@rollup/rollup-android-arm-eabi": "4.45.1", "@rollup/rollup-android-arm64": "4.45.1", "@rollup/rollup-darwin-arm64": "4.45.1", "@rollup/rollup-darwin-x64": "4.45.1", "@rollup/rollup-freebsd-arm64": "4.45.1", "@rollup/rollup-freebsd-x64": "4.45.1", "@rollup/rollup-linux-arm-gnueabihf": "4.45.1", "@rollup/rollup-linux-arm-musleabihf": "4.45.1", "@rollup/rollup-linux-arm64-gnu": "4.45.1", "@rollup/rollup-linux-arm64-musl": "4.45.1", "@rollup/rollup-linux-loongarch64-gnu": "4.45.1", "@rollup/rollup-linux-powerpc64le-gnu": "4.45.1", "@rollup/rollup-linux-riscv64-gnu": "4.45.1", "@rollup/rollup-linux-riscv64-musl": "4.45.1", "@rollup/rollup-linux-s390x-gnu": "4.45.1", "@rollup/rollup-linux-x64-gnu": "4.45.1", "@rollup/rollup-linux-x64-musl": "4.45.1", "@rollup/rollup-win32-arm64-msvc": "4.45.1", "@rollup/rollup-win32-ia32-msvc": "4.45.1", "@rollup/rollup-win32-x64-msvc": "4.45.1", "fsevents": "~2.3.2" }, "bin": { "rollup": "dist/bin/rollup" } }, "sha512-4iya7Jb76fVpQyLoiVpzUrsjQ12r3dM7fIVz+4NwoYvZOShknRmiv+iu9CClZml5ZLGb0XMcYLutK6w9tgxHDw=="],
diff --git a/frontend/package.json b/frontend/package.json
index 87874eb..13dbb28 100644
--- a/frontend/package.json
+++ b/frontend/package.json
@@ -11,7 +11,9 @@
   },
   "dependencies": {
     "react": "^19.1.0",
-    "react-dom": "^19.1.0"
+    "react-dom": "^19.1.0",
+    "react-icons": "^5.5.0",
+    "react-use-websocket": "^4.13.0"
   },
   "devDependencies": {
     "@eslint/js": "^9.30.1",
diff --git a/frontend/src/App.jsx b/frontend/src/App.jsx
index f020bb9..bba9e60 100644
--- a/frontend/src/App.jsx
+++ b/frontend/src/App.jsx
@@ -1,94 +1,13 @@
-import { useState, useEffect } from "react";
-const API_BASE_URL = "http://localhost:8000";
-
-function PDFList({ pdfs }) {
-  return (
-    <div>
-      <div>
-        <h1>PDFs</h1>
-      </div>
-      <div>
-        <table>
-          <thead>
-            <tr>
-              <th>Name</th>
-              <th>Date</th>
-              <th>Creator</th>
-            </tr>
-          </thead>
-          <tbody>
-            {pdfs.map((pdf) => (
-              <tr key={pdf.id}>
-                <td>{pdf.name}</td>
-                <td>{pdf.date}</td>
-                <td>{pdf.creator}</td>
-              </tr>
-            ))}
-          </tbody>
-        </table>
-      </div>
-    </div>
-  );
-}
+import { InferenceStatusIndicator } from "./InferenceStatusIndicator";
 
 export default function App() {
-  const [name, setName] = useState("");
-  const [pdfs, setPdfs] = useState([]);
-
-  async function addPdf(event) {
-    event.preventDefault();
-
-    try {
-      const endpoint = `${API_BASE_URL}/create`;
-      const response = await fetch(endpoint, {
-        method: "POST",
-        headers: { "Content-Type": "application/json" },
-        body: JSON.stringify({ name: name }),
-        //credentials: "include",
-      });
-
-      if (!response.ok) {
-        const errorData = await response.json();
-        throw new Error(errorData.detail || "PDF creation failed");
-      }
-      console.log("PDF created successfully!");
-      setName("");
-    } catch (err) {
-      console.error(err);
-    }
-  }
-
-  useEffect(() => {
-    const ws = new WebSocket("ws://localhost:8000/ws/pdfs");
-    ws.onmessage = (event) => {
-      const data = JSON.parse(event.data);
-      setPdfs(data.pdfs);
-    };
-    return () => ws.close();
-  }, []);
-
   return (
     <>
       <div>
         <div>
-          <h1>Create a pdf</h1>
+          <InferenceStatusIndicator />
         </div>
-        <form onSubmit={addPdf}>
-          <div>
-            <label>PDF:</label>
-            <input
-              type="pdf"
-              value={name}
-              onChange={(e) => setName(e.target.value)}
-              required
-            />
-          </div>
-          <div>
-            <button type="submit">Create PDF</button>
-          </div>
-        </form>
       </div>
-      <PDFList pdfs={pdfs} />
     </>
   );
 }
diff --git a/frontend/src/InferenceStatusIndicator.jsx b/frontend/src/InferenceStatusIndicator.jsx
new file mode 100644
index 0000000..539e43a
--- /dev/null
+++ b/frontend/src/InferenceStatusIndicator.jsx
@@ -0,0 +1,139 @@
+import { useState, useEffect, useRef } from "react";
+
+const STATUS_COLORS = {
+  scaledToZero: { bg: "#ececec", text: "#888888" },
+  pending: { bg: "#FFDE99", text: "#E68600" },
+  initializing: { bg: "#E6C0FF", text: "#7E26C9" },
+  running: { bg: "#ADEFBA", text: "#17803A" },
+  paused: { bg: "#D0D0D0", text: "#555555" },
+  closed: { bg: "#f2f2f2", text: "#888" },
+  error: { bg: "#ffcfd1", text: "#D32F2F" },
+  loading: { bg: "#F3F3FF", text: "#6C7CA1" },
+};
+
+function Spinner({ color = "#888" }) {
+  return (
+    <span
+      style={{
+        display: "inline-block",
+        width: 20,
+        height: 20,
+        marginRight: 10,
+        border: `3px solid ${color}44`,
+        borderTop: `3px solid ${color}`,
+        borderRadius: "50%",
+        animation: "spin 1s linear infinite",
+        verticalAlign: "middle",
+      }}
+    />
+  );
+}
+
+export function InferenceStatusIndicator() {
+  const [status, setStatus] = useState("loading");
+  const wsRef = useRef(null);
+  useEffect(() => {
+    const ws = new window.WebSocket(
+      "ws://192.168.178.22:8000/inference/ws/status",
+    );
+    wsRef.current = ws;
+
+    ws.onmessage = (event) => {
+      try {
+        const data = JSON.parse(event.data);
+        if (data.status) setStatus(data.status);
+      } catch (_) {}
+    };
+    ws.onclose = () => setStatus("closed");
+    ws.onerror = () => setStatus("error");
+    return () => {
+      ws.close();
+    };
+  }, []);
+
+  const { bg, text } = STATUS_COLORS[status] || STATUS_COLORS["loading"];
+
+  async function handleResume() {
+    try {
+      const res = await fetch("http://192.168.178.22:8000/inference/resume");
+      // Optionally: check for status etc
+      if (!res.ok) throw new Error(await res.text());
+      // Optionally: refresh status here, but websocket should update soon
+    } catch (err) {
+      alert("Resume failed: " + err.message);
+    }
+  }
+
+  async function handlePause() {
+    try {
+      const res = await fetch("http://192.168.178.22:8000/inference/pause");
+      // Optionally: check for status etc
+      if (!res.ok) throw new Error(await res.text());
+      // Optionally: refresh status here, but websocket should update soon
+    } catch (err) {
+      alert("Pause failed: " + err.message);
+    }
+  }
+
+  return (
+    <div
+      style={{
+        display: "flex",
+        alignItems: "center",
+        justifyContent: "center",
+        background: bg,
+        color: text,
+        borderRadius: 16,
+        minWidth: 160,
+        minHeight: 40,
+        padding: "8px 24px",
+        fontWeight: 500,
+        fontSize: "1.1em",
+        boxShadow: "0 2px 8px #0001",
+        margin: 4,
+        letterSpacing: 1,
+      }}
+    >
+      {status === "initializing" && <Spinner color={text} />}
+      <span style={{ margin: "0 auto", fontWeight: 600, color: text }}>
+        {status.charAt(0).toUpperCase() + status.slice(1)}
+      </span>
+      <style>
+        {`
+          @keyframes spin { 100% { transform: rotate(360deg); } }
+        `}
+      </style>
+      {status === "paused" ? (
+        <button
+          onClick={handleResume}
+          style={{
+            marginLeft: 16,
+            padding: "6px 12px",
+            borderRadius: 8,
+            border: "none",
+            background: "#E68600",
+            color: "white",
+            fontWeight: 600,
+          }}
+        >
+          Resume
+        </button>
+      ) : (
+        <button
+          onClick={handlePause}
+          style={{
+            marginLeft: 16,
+            padding: "6px 12px",
+            borderRadius: 8,
+            border: "none",
+            background: "#888",
+            color: "white",
+            fontWeight: 600,
+          }}
+        >
+          Pause
+        </button>
+      )}
+    </div>
+  );
+}
